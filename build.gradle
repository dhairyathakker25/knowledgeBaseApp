plugins {
	id 'org.springframework.boot' version '2.2.5.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'scala'
}

group = 'com.topics'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
	gatling
}

repositories {
	mavenCentral()
	maven {
		url 'http://oss.jfrog.org/artifactory/oss-snapshot-local'
	}
}

springBoot {
	buildInfo()
}

sourceSets {
	simulations {
		scala {
			srcDirs = ["src/test/scala"]
		}
		resources {
			srcDirs = ["src/test/resources"]
		}
		compileClasspath += configurations.gatling
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'org.projectlombok:lombok'
	implementation 'org.modelmapper:modelmapper:2.3.5'
	implementation 'io.micrometer:micrometer-core:1.5.2'
	implementation 'io.micrometer:micrometer-registry-jmx:1.5.2'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'

	implementation 'io.springfox:springfox-swagger2:3.0.0-SNAPSHOT'
	implementation 'io.springfox:springfox-swagger-ui:2.9.2'
	implementation 'io.springfox:springfox-bean-validators:3.0.0-SNAPSHOT'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
	testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.3.1'

	gatling 'io.gatling.highcharts:gatling-charts-highcharts:2.3.0'
	gatling 'org.scala-lang:scala-library:2.12.4'
}

configurations.all {
	resolutionStrategy {
		eachDependency { DependencyResolveDetails details ->
			if (details.requested.group == 'io.netty') {
				details.useVersion "4.0.51.Final"
			}
		}
	}
}


test {
	useJUnitPlatform()
}

task gatlingRun(type: JavaExec) {
	description ='run perf tests'

	if (project.hasProperty('users')) {
		environment users: project.property('users')
	}
	new File("${buildDir}/reports/gatling").mkdirs()

	classpath = sourceSets.simulations.runtimeClasspath +configurations.gatling
	main = "io.gatling.app.Gatling"

	args = [
			'-sf', 'simulations/resources',
			'-df', 'simulations/resources',
			'-s', 'gatling.simulation.SecondLoadTest',
			'-rf', "${project.buildDir}" + '/reports/gatling'
	]

}

